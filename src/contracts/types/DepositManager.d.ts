/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DepositManagerInterface extends ethers.utils.Interface {
  functions: {
    "babyTrees(uint256)": FunctionFragment;
    "babyTreesLength()": FunctionFragment;
    "back()": FunctionFragment;
    "depositCount()": FunctionFragment;
    "depositFor(uint256,uint256,uint256)": FunctionFragment;
    "dequeueToSubmit()": FunctionFragment;
    "front()": FunctionFragment;
    "owner()": FunctionFragment;
    "paramMaxSubtreeDepth()": FunctionFragment;
    "paramMaxSubtreeSize()": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "reenqueue(bytes32)": FunctionFragment;
    "rollup()": FunctionFragment;
    "setRollupAddress(address)": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "babyTrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "babyTreesLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "back", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dequeueToSubmit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "front", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paramMaxSubtreeDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramMaxSubtreeSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reenqueue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRollupAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "babyTrees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "babyTreesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "back", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dequeueToSubmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "front", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paramMaxSubtreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramMaxSubtreeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reenqueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRollupAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "DepositQueued(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DepositSubTreeReady(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSubTreeReady"): EventFragment;
}

export class DepositManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DepositManagerInterface;

  functions: {
    babyTrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    babyTreesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    back(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositFor(
      pubkeyID: BigNumberish,
      l1Amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dequeueToSubmit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    front(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paramMaxSubtreeDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    paramMaxSubtreeSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollup(overrides?: CallOverrides): Promise<[string]>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  babyTrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  babyTreesLength(overrides?: CallOverrides): Promise<BigNumber>;

  back(overrides?: CallOverrides): Promise<BigNumber>;

  depositCount(overrides?: CallOverrides): Promise<BigNumber>;

  depositFor(
    pubkeyID: BigNumberish,
    l1Amount: BigNumberish,
    tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dequeueToSubmit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  front(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paramMaxSubtreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

  paramMaxSubtreeSize(overrides?: CallOverrides): Promise<BigNumber>;

  queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  reenqueue(
    subtreeRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollup(overrides?: CallOverrides): Promise<string>;

  setRollupAddress(
    _rollup: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRegistry(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    babyTrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    babyTreesLength(overrides?: CallOverrides): Promise<BigNumber>;

    back(overrides?: CallOverrides): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      pubkeyID: BigNumberish,
      l1Amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dequeueToSubmit(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { subtreeID: BigNumber; subtreeRoot: string }
    >;

    front(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paramMaxSubtreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxSubtreeSize(overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    reenqueue(subtreeRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    rollup(overrides?: CallOverrides): Promise<string>;

    setRollupAddress(_rollup: string, overrides?: CallOverrides): Promise<void>;

    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    DepositQueued(
      pubkeyID?: null,
      tokenID?: null,
      l2Amount?: null,
      subtreeID?: null,
      depositID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pubkeyID: BigNumber;
        tokenID: BigNumber;
        l2Amount: BigNumber;
        subtreeID: BigNumber;
        depositID: BigNumber;
      }
    >;

    DepositSubTreeReady(
      subtreeID?: null,
      subtreeRoot?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { subtreeID: BigNumber; subtreeRoot: string }
    >;
  };

  estimateGas: {
    babyTrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    babyTreesLength(overrides?: CallOverrides): Promise<BigNumber>;

    back(overrides?: CallOverrides): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      pubkeyID: BigNumberish,
      l1Amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dequeueToSubmit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    front(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxSubtreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxSubtreeSize(overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollup(overrides?: CallOverrides): Promise<BigNumber>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    babyTrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    babyTreesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    back(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFor(
      pubkeyID: BigNumberish,
      l1Amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dequeueToSubmit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    front(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramMaxSubtreeDepth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramMaxSubtreeSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
