/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BLSAccountRegistryInterface extends ethers.utils.Interface {
  functions: {
    "BATCH_DEPTH()": FunctionFragment;
    "BATCH_SIZE()": FunctionFragment;
    "DEPTH()": FunctionFragment;
    "SET_SIZE()": FunctionFragment;
    "WITNESS_LENGTH()": FunctionFragment;
    "exists(uint256,uint256[4],bytes32[31])": FunctionFragment;
    "filledSubtreesLeft(uint256)": FunctionFragment;
    "filledSubtreesRight(uint256)": FunctionFragment;
    "leafIndexLeft()": FunctionFragment;
    "leafIndexRight()": FunctionFragment;
    "register(uint256[4])": FunctionFragment;
    "registerBatch(uint256[4][16])": FunctionFragment;
    "root()": FunctionFragment;
    "rootLeft()": FunctionFragment;
    "rootRight()": FunctionFragment;
    "zeros(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BATCH_DEPTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DEPTH", values?: undefined): string;
  encodeFunctionData(functionFragment: "SET_SIZE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WITNESS_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtreesLeft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtreesRight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leafIndexLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leafIndexRight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBatch",
    values: [
      [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootLeft", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootRight", values?: undefined): string;
  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "BATCH_DEPTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BATCH_SIZE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DEPTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SET_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WITNESS_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtreesLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtreesRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leafIndexLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leafIndexRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootLeft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootRight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;

  events: {
    "BatchPubkeyRegistered(uint256,uint256)": EventFragment;
    "SinglePubkeyRegistered(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchPubkeyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SinglePubkeyRegistered"): EventFragment;
}

export class BLSAccountRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BLSAccountRegistryInterface;

  functions: {
    BATCH_DEPTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    BATCH_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    SET_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    WITNESS_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    exists(
      pubkeyID: BigNumberish,
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      witness: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    filledSubtreesLeft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    filledSubtreesRight(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    leafIndexLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    leafIndexRight(overrides?: CallOverrides): Promise<[BigNumber]>;

    register(
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerBatch(
      pubkeys: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[string]>;

    rootLeft(overrides?: CallOverrides): Promise<[string]>;

    rootRight(overrides?: CallOverrides): Promise<[string]>;

    zeros(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  BATCH_DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

  BATCH_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

  SET_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  WITNESS_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  exists(
    pubkeyID: BigNumberish,
    pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    witness: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  filledSubtreesLeft(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  filledSubtreesRight(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  leafIndexLeft(overrides?: CallOverrides): Promise<BigNumber>;

  leafIndexRight(overrides?: CallOverrides): Promise<BigNumber>;

  register(
    pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerBatch(
    pubkeys: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<string>;

  rootLeft(overrides?: CallOverrides): Promise<string>;

  rootRight(overrides?: CallOverrides): Promise<string>;

  zeros(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BATCH_DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

    BATCH_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

    SET_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    WITNESS_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    exists(
      pubkeyID: BigNumberish,
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      witness: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    filledSubtreesLeft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    filledSubtreesRight(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    leafIndexLeft(overrides?: CallOverrides): Promise<BigNumber>;

    leafIndexRight(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBatch(
      pubkeys: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<string>;

    rootLeft(overrides?: CallOverrides): Promise<string>;

    rootRight(overrides?: CallOverrides): Promise<string>;

    zeros(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    BatchPubkeyRegistered(
      startID?: null,
      endID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { startID: BigNumber; endID: BigNumber }
    >;

    SinglePubkeyRegistered(
      pubkeyID?: null
    ): TypedEventFilter<[BigNumber], { pubkeyID: BigNumber }>;
  };

  estimateGas: {
    BATCH_DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

    BATCH_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

    SET_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    WITNESS_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    exists(
      pubkeyID: BigNumberish,
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      witness: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    filledSubtreesLeft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    filledSubtreesRight(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leafIndexLeft(overrides?: CallOverrides): Promise<BigNumber>;

    leafIndexRight(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerBatch(
      pubkeys: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    rootLeft(overrides?: CallOverrides): Promise<BigNumber>;

    rootRight(overrides?: CallOverrides): Promise<BigNumber>;

    zeros(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BATCH_DEPTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BATCH_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEPTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITNESS_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(
      pubkeyID: BigNumberish,
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      witness: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    filledSubtreesLeft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    filledSubtreesRight(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leafIndexLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leafIndexRight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerBatch(
      pubkeys: [
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootRight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeros(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
